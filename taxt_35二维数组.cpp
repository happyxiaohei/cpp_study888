# include<iostream>
using namespace std;

int main35() {


	//二维数组的定义方式

	//1.数据类型   数组名 [行数]  [列数]
	int arr[2][3];
	arr[0][0] = 1;
	arr[0][1] = 2;
	arr[0][2] = 3;
	arr[1][0] = 4;
	arr[1][1] = 5;
	arr[1][2] = 6;

	//这种输出方式是无脑输出方式,适用于数组内的元素比较少的时候可以使用
	//cout << arr[0][0] << endl;
	//cout << arr[0][1] << endl;
	//cout << arr[0][2] << endl;
	//cout << arr[1][0] << endl;
	//cout << arr[1][1] << endl;
	//cout << arr[1][2] << endl;

	//还可以用for循环来输出
	//外层打印行数,内层打印列数
	for (int i = 0; i < 2; i++)
	{
		for (int j = 0; j < 3; j++)
		{
			//        i  =  行数,    j = 列数
			cout << arr[i][j] << endl;
		}
	}

	cout << "这是第一种方式" << endl;
	cout << "*********************" << endl;

	//2.  数据类型    数组名   [行数]  [列数] =  {  {数据1,数据2} , {数据3}{数据4}  };


	//这种定义方式非常推荐,因为这样的数组可以非常直观的看到数组内的元素有哪些
	//在定义数组的同时,里面的数据就已经定义好了
	int arr2[2][3] =
	{
		{1,2,3},
		{4,5,6}
	};

	//这种是矩阵输出的方式 
	for (int ii= 0; ii < 2; ii++)
	{
		for (int jj = 0; jj < 3; jj++)
		{
			//这里矩阵的核心是在于  输出一个元素后,不换行,然后在列输出完了后   开始循环行数的时候才开始换行
			cout << arr2[ii][jj] <<"  ";
			
		}
		cout << endl;
	}

	cout << "这是第二种方式" << endl;
	cout << "*********************" << endl;


	//3.   数据类型   数组名 [行数][列数] = {数据1,数据2,数据3,数据4};


	//这种方式程序也是能读取出来的   因为是两行三列了,程序在第一行读取到三列的时候,会直接换行读取第二行
	int arr3[2][3] = { 9,8,7,6,5,4 };

	for (int iii = 0; iii < 2; iii++)
	{
		for (int jjj = 0; jjj < 3; jjj++)
		{
			
			cout << arr3[iii][jjj] << "  ";

		}
		cout << endl;
	}

	cout << "这是第三种方式" << endl;
	cout << "*********************" << endl;
	
	//4.   数据类型   数组名 [][列数] = {数据1,数据2,数据3,数据4};

	//这里的方式和上面唯一的区别就是可以省略行数的填写,但是列数一定是要填写的

	int arr4[][3] = { 9,8,7,6,5,4 };

	for (int iiii = 0; iiii < 2; iiii++)
	{
		for (int jjjj = 0; jjjj < 3; jjjj++)
		{

			cout << arr4[iiii][jjjj] << "  ";

		}
		cout << endl;
	}

	cout << "这是第四种方式" << endl;
	cout << "*********************" << endl;

	

	//注意,一般用二维数组的话,还是要用第二种方式来使用.
	system("pause");

	return 0;

}